#include "main.h"
#include <stdio.h>
#include <stdlib.h>

char **strtow(const char *str);

/**
 * print_tab - Prints an array of strings
 * @tab: The array to print
 *
 * Return: nothing
 */
void print_tab(char **tab)
{
    int i;

    for (i = 0; tab[i] != NULL; ++i)
    {
        printf("%s\n", tab[i]);
    }
}

/**
 * main - check the code for ALX School students.
 *
 * Return: 1 if an error occurred, 0 otherwise
 */
int main(void)
{
    char **tab;
    const char *input_str = "      ALX School         #cisfun      ";

    tab = strtow(input_str);
    if (tab == NULL)
    {
        printf("Failed\n");
        return (1);
    }
    print_tab(tab);

    // Free allocated memory
    int i;
    for (i = 0; tab[i] != NULL; ++i)
    {
        free(tab[i]);
    }
    free(tab);

    return (0);
}

char **strtow(const char *str)
{
    if (str == NULL || *str == '\0')
        return NULL;

    int i, j, k, len;
    len = strlen(str);
    char **words = NULL;

    // Count the number of words (delimited by spaces).
    int word_count = 0;
    for (i = 0; i < len; i++)
    {
        if (str[i] != ' ')
        {
            word_count++;
            while (str[i] != ' ' && i < len)
                i++;
        }
    }

    // Allocate memory for the array of words.
    words = (char **)malloc((word_count + 1) * sizeof(char *));
    if (words == NULL)
        return NULL;

    i = 0;
    j = 0;
    while (i < len)
    {
        if (str[i] != ' ')
        {
            // Find the end of the current word.
            k = i;
            while (str[k] != ' ' && k < len)
                k++;

            // Allocate memory for the word and copy it.
            int word_length = k - i;
            words[j] = (char *)malloc((word_length + 1) * sizeof(char));
            if (words[j] == NULL)
            {
                // Free previously allocated memory if an allocation fails.
                for (int index = 0; index < j; index++)
                    free(words[index]);
                free(words);
                return NULL;
            }

            strncpy(words[j], str + i, word_length);
            words[j][word_length] = '\0';
            j++;
            i = k;
        }
        else
        {
            i++;
        }
    }

    // Terminate the array with a NULL pointer.
    words[j] = NULL;

    return words;
}
